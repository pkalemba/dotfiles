type>(<scope>): <subject>

<body>

<footer>

# -- Type --
# Must be one of the following:
#
# feat: A new feature
# fix: A bug fix
# docs: Documentation only changes
# style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
# refactor: A code change that neither fixes a bug nor adds a feature
# perf: A code change that improves performance
# test: Adding missing tests or correcting existing tests
# build Changes that affect the build system, CI configuration or external dependencies (example scopes: gulp, broccoli, npm)
# chore: Other changes that don't modify src or test files
#

# -- Scope --
# The scope could be anything specifying place of the commit change. For example Compiler, ElementInjector, etc.
#

# -- Subject --
# The subject contains a succinct description of the change:
# use the imperative, present tense: "change" not "changed" nor "changes"
# don't capitalize first letter
# no dot (.) at the end
#

# -- Body --
# Just as in the subject, use the imperative, present tense: "change" not "changed" nor "changes".
# The body should include the motivation for the change and contrast this with previous behavior.
#

# -- Footer --
# The footer should contain any information about Breaking Changes and is also the place to reference GitHub issues that this commit Closes.
# Breaking Changes should start with the word BREAKING CHANGE: with a space or two newlines. The rest of the commit message is then used for this.
#
#** Funtip **
# Work hard, play hard!  Consider prefixing your commit messages with a relevant emoji for
# great good:
#
#   :art: `:art:` when improving the format/structure of the code
#   :racehorse: `:racehorse:` when improving performance
#   :non-potable_water: `:non-potable_water:` when plugging memory leaks
#   :memo: `:memo:` when writing docs
#   :penguin: `:penguin:` when fixing something on Linux
#   :bug: `:bug:` when fixing a bug
#   :fire: `:fire:` when removing code or files
#   :green_heart: `:green_heart:` when fixing the CI build
#   :white_check_mark: `:white_check_mark:` when adding tests
#   :lock: `:lock:` when dealing with security
#   :arrow_up: `:arrow_up:` when upgrading dependencies
#   :arrow_down: `:arrow_down:` when downgrading dependencies
#   :shirt: `:shirt:` when removing linter warnings